///////////////////////////////////////////////////////////////////////////////
// RobotArmMain.cpp
#include "TcPch.h"
#pragma hdrstop

#include "RobotArmMain.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CRobotArmMain
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CRobotArmMain
BEGIN_INTERFACE_MAP(CRobotArmMain)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CRobotArmMain)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CRobotArmMain)
IMPLEMENT_ITCADI(CRobotArmMain)
IMPLEMENT_ITCWATCHSOURCE(CRobotArmMain)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CRobotArmMain 
BEGIN_SETOBJPARA_MAP(CRobotArmMain)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_RobotArmMainParameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CRobotArmMain 
BEGIN_GETOBJPARA_MAP(CRobotArmMain)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_RobotArmMainParameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CRobotArmMain
BEGIN_OBJPARAWATCH_MAP(CRobotArmMain)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CRobotArmMain
BEGIN_OBJDATAAREA_MAP(CRobotArmMain)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_RobotArmMainInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_RobotArmMainOutputs, m_Outputs)
	OBJDATAAREA_VALUE(ADI_RobotArmMainPlcToCpp, m_PlcToCpp)
	OBJDATAAREA_VALUE(ADI_RobotArmMainCppToPlc, m_CppToPlc)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CRobotArmMain::CRobotArmMain()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, pi(3.14159)
	, k(0.0301)
	, b(-176.84)
	, temp_k(-0.0055)
	, temp_b(67.3)
	, i(0)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
	memset(&m_PlcToCpp, 0, sizeof(m_PlcToCpp));
	memset(&m_CppToPlc, 0, sizeof(m_CppToPlc));
///</AutoGeneratedContent>

	PositionSize = 7 - 1;
	ShoulderInitStart = false;
	HandHold = false;
	ErrorCode = 0;
	PositionNum = 0;
	PositionStatus = 0;
	InitElbowStatus = 0;
	ElbowStopStatus = 0;
	ElbowStopStartTime = 0;
	ElbowStopStartM1 = 0;
	ElbowStopStartM2 = 0;
	ElbowInitFinish = false;
	GlobalStatus = 0;
	PositionStatus = 0;
	SetShoulderLevelShiftAngle = 0;
	SetShoulderRotateAngle = 0;

	wrist_pwm_max = 1000;//设定腕关节pwm输出最大值
	wrist_pwm_min = 0;//设定腕关节pwm输出最小值
	wrist_angle_max = 62;//设定腕关节角度最大值
	wrist_error = .0;//设定腕关节角度最小值
	wrist_motion_flag = 0;//腕关节到达预期位置标志位
	hand_grip_time = 0;//手部抓握时间
	time_one = time_two = time_three = time_four = 0;
}

///////////////////////////////////////////////////////////////////////////////
CRobotArmMain::~CRobotArmMain() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CRobotArmMain)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CRobotArmMain::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CRobotArmMain::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CRobotArmMain::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CRobotArmMain::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

////存储运动角度信息，角度为绝对角度，单位度
////TODO:这个形式不好给初始值，改结构体的优先级放后
//struct AngleData
//{
//	double ShoulderLevelShift;		//肩关节平移角度
//	double ShoulderRotate;			//肩关节旋转角度
//	double Elbow;					//肘关节角度
//	double Wrist;					//腕关节角度
//	double ArriveTime;				//到达此角度时间
//	double LeaveTime;				//离开此角度时间
//};

//double KinematicsForwardData[100][7] = { { 0, 0, 0, 5, 5 }, { 70, 100, 0, 25, 27 }, { 70, 100, 50, 40, 60 }, { 0, 0, 50, 75, 77 }, { 0, 0, 0, 87, 90 } };	//正解数据值:肩、肘、腕角度、到达时间、离开时间
//double KinematicsForwardData[100][5] = { { 0, 0, 0, 5, 5 }, { 50, 0, 0, 25, 30 }, { 0, 0, 0, 50, 55 }, { 0, 0, 0, 75, 80 }, { 0, 0, 0, 87, 90 } };	//正解数据值:肩、肘、腕角度、到达时间、离开时间
//double ElbowSpeed = 5;		//角度/秒

//整体动作
double All[10][7] = { { 0, 0, 0, 0, 0, 0, 0 }, { 70, 0, 100, 60, 0, 25, 30 }, { 70, 0, 100, 60, 1, 30.1, 50 }, { 70, 10, 100, 60, 1, 55, 60 }, { 70, 0, 100, 60, 1, 65, 67 }, { 0, 0, 0, 0, 1, 87, 90 }, { 0, 0, 0, 0, 0, 90.1, 100 } };
//double All[10][7] = { { 0, 0, 0, 0, 0, 0, 0 }, { 20, 0, 0, 0, 0, 5, 6 }, { 0, 0, 0, 0, 0, 17, 37 }, { 0, 0, 0, 0, 0, 45, 50 }, { 0, 0, 0, 0, 0, 55, 70 } };
//肘关节100度
double ElbowHundredAngle[10][7] = { { 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 100, 0, 0, 25, 30 }, { 0, 0, 0, 0, 0, 55, 60 } };
//肘关节2度/秒
double ElbowSpeed2Data[10][7] = { { 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 100, 0, 0, 50, 55 }, { 0, 0, 0, 0, 0, 105, 110 } };
//肘关节4度/秒
double ElbowSpeed4Data[10][7] = { { 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 100, 0, 0, 25, 30 }, { 0, 0, 0, 0, 0, 55, 60 } };
//肘关节6度/秒
double ElbowSpeed6Data[10][7] = { { 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 100, 0, 0, 16.67, 20 }, { 0, 0, 0, 0, 0, 36.67, 40 } };
//腕关节60度
double WristSixtyAngle[10][7] = { { 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 61, 0, 5, 100 }, { 0, 0, 0, 0, 0, 101, 102 } };
//手抓取
double HandHoldData[10][7] = { { 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 1, 1, 80 }, { 0, 0, 0, 0, 0, 81, 90 } };
double Move[10][7];

int init_flag = 1;
PID_Position wrist_pid_control(30, 1.3, 0.5, 0.01);//腕关节参数设置，前三项为pid参数，最后一项为周期

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CRobotArmMain::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// TODO: Replace the sample with your cyclic code
	UpdateInputs();

	if (m_PlcToCpp.PlcStarted)	//PLC控制整体启动
	{
		switch (GlobalStatus)
		{
		case 0:	//电机初始化
			m_CppToPlc.ShoulderInitStart = true;
			if ((m_PlcToCpp.ShoulderInitFinish) && (m_PlcToCpp.LevelShiftExtEnabled) && (m_PlcToCpp.RotateExtEnabled))
			{
				//电机初始化完成，两个电机外部位置设定使能
				GlobalStatus = 1;
			}
			break;
		case 1:	//腕关节初始化
			wrist_init_angle = k*m_Inputs.wrist_resistor + b;
			GlobalStatus = 2;
			ElbowInitStartTime = GlobalTime;	//记录肘关节开始初始化时间
			break;
		case 2:	//肘关节初始化
			if (ElbowInitFinish == false)//已经处于初始化状态则不重新初始化
			{
				if (((GlobalTime - ElbowInitStartTime) > 0) && ((GlobalTime - ElbowInitStartTime) < 5))
				{
					elbow.SetM1(3.5 / 5.0 * (GlobalTime - ElbowInitStartTime));
					elbow.SetM2(0.2 / 5.0 * (GlobalTime - ElbowInitStartTime));
				}
				else if ((GlobalTime - ElbowInitStartTime) > 5)
				{
					if (fabs_(elbow.ShowAngle()) < 1)
					{
						//肘关节初始化完成到达0位置+-1度
						ElbowInitFinish = true;
						GlobalStatus = 3;
					}
				}
			}
			else if (ElbowInitFinish == true)
			{
				GlobalStatus = 3;
			}
			break;
		case 3://切换动作
			MoveStartTime = GlobalTime + 0.01;			//记录运动开始时间，下一个循环开始运动，所以加0.01
			switch (m_PlcToCpp.ChooseAction)
			{
			case 0://整体动作
				GlobalStatus = 4;
				break;
			case 1://肘关节100度
				GlobalStatus = 5;
				break;
			case 2://肘关节2度/秒
				GlobalStatus = 6;
				break;
			case 3://肘关节4度/秒
				GlobalStatus = 7;
				break;
			case 4://肘关节6度/秒
				GlobalStatus = 8;
				break;
			case 5://腕关节60度
				GlobalStatus = 9;
				break;
			case 6://手抓取80s
				GlobalStatus = 10;
				break;
			default:
				break;
			}
			break;
		case 4:	//开始执行动作各个动作。暂时每个动作一段代码。TODO：写一个适用于所有动作的代码。//整体动作
			if (PositionNum < PositionSize)
			{
				if (PositionNum == 1)
				{
					double stop = 1;
				}
				switch (PositionStatus)
				{
				case 0:	//计算多项式函数
					//肩关节平移
					ShoulderLevelShiftPolynomial.plan3rdProfileT(
						All[PositionNum][6],
						All[PositionNum + 1][5],
						All[PositionNum][0],
						All[PositionNum + 1][0],
						0, 0);
					//肩关节旋转
					ShoulderRotatePolynomial.plan3rdProfileT(
						All[PositionNum][6],
						All[PositionNum + 1][5],
						All[PositionNum][1],
						All[PositionNum + 1][1],
						0, 0);
					//肘关节平移
					ElbowPolynomial.plan3rdProfileT(
						All[PositionNum][6],
						All[PositionNum + 1][5],
						All[PositionNum][2],
						All[PositionNum + 1][2],
						0, 0);
					//腕关节平移
					WristPolynomial.plan3rdProfileT(
						All[PositionNum][6],
						All[PositionNum + 1][5],
						All[PositionNum][3],
						All[PositionNum + 1][3],
						0, 0);
					PositionStatus = 1;
					//这里不需要加break，计算完插值表达式后就进入case1，给定角度。
				case 1:
					if ((MoveTimer >= All[PositionNum][6]) && (MoveTimer <= All[PositionNum + 1][5]))
					{
						//肩关节
						SetShoulderLevelShiftAngle = ShoulderLevelShiftPolynomial.pos(MoveTimer);
						SetShoulderRotateAngle = ShoulderRotatePolynomial.pos(MoveTimer);
						
						//肘关节
						double SetElbowAngle = ElbowPolynomial.pos(MoveTimer);
						elbow.SetTargetAngle(SetElbowAngle);
						//腕关节
						wrist_target_angle = WristPolynomial.pos(MoveTimer);
						//手
						if (All[PositionNum + 1][4] == 1)
						{
							HandHold = true;
						}
						else if (All[PositionNum + 1][4] == 0)
						{
							HandHold = false;
						}

					}
					else if (MoveTimer > All[PositionNum + 1][5])
					{
						//验证所有关节是否达到期望位置
						//这里判断方式有问题，因为角度可能存在超调，将会在第一次到达时认为到达目标点，而不是在稳定后认为到达目标点。
						if ((fabs_(AngleLevelShift - All[PositionNum + 1][0]) > 5))				//肩关节平移
						{
							ErrorCode = 2001;
							PositionStatus = 3;
						}
						//if ((fabs_(AngleRotate - All[PositionNum + 1][1]) > 5))			//肩关节旋转
						else if ((fabs_(AngleRotate - All[PositionNum + 1][1]) > 5))			//肩关节旋转
						{
							ErrorCode = 2101;
							PositionStatus = 3;
						}
						//if ((fabs_(elbow.ShowAngle() - NextPositionData[1]) > 5))			//肘关节
						else if ((fabs_(elbow.ShowAngle() - All[PositionNum + 1][2]) > 5))		//肘关节
						{
							ErrorCode = 2201;
							PositionStatus = 3;
						}
						//if ((fabs_(wrist_target_angle - All[PositionNum + 1][3]) > 5))	//腕关节
						else if ((fabs_(wrist_target_angle - All[PositionNum + 1][3]) > 5))		//腕关节
						{
							ErrorCode = 2301;
							PositionStatus = 3;
						}
						else
						{
							PositionStatus = 0;
							PositionNum++;
						}
					}
					break;
				case 3://错误处理
					break;
				default:
					break;
				}
			}
			else if (PositionNum >= PositionSize)
			{
				GlobalStatus = 20;
			}
			break;
		case 5:	//肘关节100度
			if (PositionNum < PositionSize)
			{
				if (PositionNum == 1)
				{
					double stop = 1;
				}
				switch (PositionStatus)
				{
				case 0:	//计算多项式函数
					//肩关节平移
					ShoulderLevelShiftPolynomial.plan3rdProfileT(
						ElbowHundredAngle[PositionNum][6],
						ElbowHundredAngle[PositionNum + 1][5],
						ElbowHundredAngle[PositionNum][0],
						ElbowHundredAngle[PositionNum + 1][0],
						0, 0);
					//肩关节旋转
					ShoulderRotatePolynomial.plan3rdProfileT(
						ElbowHundredAngle[PositionNum][6],
						ElbowHundredAngle[PositionNum + 1][5],
						ElbowHundredAngle[PositionNum][1],
						ElbowHundredAngle[PositionNum + 1][1],
						0, 0);
					//肘关节平移
					ElbowPolynomial.plan3rdProfileT(
						ElbowHundredAngle[PositionNum][6],
						ElbowHundredAngle[PositionNum + 1][5],
						ElbowHundredAngle[PositionNum][2],
						ElbowHundredAngle[PositionNum + 1][2],
						0, 0);
					//腕关节平移
					WristPolynomial.plan3rdProfileT(
						ElbowHundredAngle[PositionNum][6],
						ElbowHundredAngle[PositionNum + 1][5],
						ElbowHundredAngle[PositionNum][3],
						ElbowHundredAngle[PositionNum + 1][3],
						0, 0);
					PositionStatus = 1;
					//这里不需要加break，计算完插值表达式后就进入case1，给定角度。
				case 1:
					if ((MoveTimer >= ElbowHundredAngle[PositionNum][6]) && (MoveTimer <= ElbowHundredAngle[PositionNum + 1][5]))
					{
						//肩关节
						SetShoulderLevelShiftAngle = ShoulderLevelShiftPolynomial.pos(MoveTimer);
						SetShoulderRotateAngle = ShoulderRotatePolynomial.pos(MoveTimer);
						//肘关节
						double SetElbowAngle = ElbowPolynomial.pos(MoveTimer);
						elbow.SetTargetAngle(SetElbowAngle);
						//腕关节
						wrist_target_angle = WristPolynomial.pos(MoveTimer);
						//手
						if (ElbowHundredAngle[PositionNum + 1][4] == 1)
						{
							HandHold = true;
						}
						else if (ElbowHundredAngle[PositionNum + 1][4] == 0)
						{
							HandHold = false;
						}

					}
					else if (MoveTimer > ElbowHundredAngle[PositionNum + 1][5])
					{
						//验证所有关节是否达到期望位置
						//这里判断方式有问题，因为角度可能存在超调，将会在第一次到达时认为到达目标点，而不是在稳定后认为到达目标点。
						if ((fabs_(AngleLevelShift - ElbowHundredAngle[PositionNum + 1][0]) > 5))				//肩关节平移
						{
							ErrorCode = 2001;
							PositionStatus = 3;
						}
						//if ((fabs_(AngleRotate - ElbowHundredAngle[PositionNum + 1][1]) > 5))			//肩关节旋转
						else if ((fabs_(AngleRotate - ElbowHundredAngle[PositionNum + 1][1]) > 5))			//肩关节旋转
						{
							ErrorCode = 2101;
							PositionStatus = 3;
						}
						//if ((fabs_(elbow.ShowAngle() - NextPositionData[1]) > 5))			//肘关节
						else if ((fabs_(elbow.ShowAngle() - ElbowHundredAngle[PositionNum + 1][2]) > 5))		//肘关节
						{
							ErrorCode = 2201;
							PositionStatus = 3;
						}
						//if ((fabs_(wrist_target_angle - ElbowHundredAngle[PositionNum + 1][3]) > 5))	//腕关节
						else if ((fabs_(wrist_target_angle - ElbowHundredAngle[PositionNum + 1][3]) > 5))		//腕关节
						{
							ErrorCode = 2301;
							PositionStatus = 3;
						}
						else
						{
							PositionStatus = 0;
							PositionNum++;
						}
					}
					break;
				case 3://错误处理
					break;
				default:
					break;
				}
			}
			else if (PositionNum >= PositionSize)
			{
				GlobalStatus = 20;
			}
			break;
		case 6:	//肘关节2度/秒
			if (PositionNum < PositionSize)
			{
				if (PositionNum == 1)
				{
					double stop = 1;
				}
				switch (PositionStatus)
				{
				case 0:	//计算多项式函数
					//肩关节平移
					ShoulderLevelShiftPolynomial.plan3rdProfileT(
						ElbowSpeed2Data[PositionNum][6],
						ElbowSpeed2Data[PositionNum + 1][5],
						ElbowSpeed2Data[PositionNum][0],
						ElbowSpeed2Data[PositionNum + 1][0],
						0, 0);
					//肩关节旋转
					ShoulderRotatePolynomial.plan3rdProfileT(
						ElbowSpeed2Data[PositionNum][6],
						ElbowSpeed2Data[PositionNum + 1][5],
						ElbowSpeed2Data[PositionNum][1],
						ElbowSpeed2Data[PositionNum + 1][1],
						0, 0);
					//肘关节平移
					ElbowPolynomial.plan3rdProfileT(
						ElbowSpeed2Data[PositionNum][6],
						ElbowSpeed2Data[PositionNum + 1][5],
						ElbowSpeed2Data[PositionNum][2],
						ElbowSpeed2Data[PositionNum + 1][2],
						0, 0);
					//腕关节平移
					WristPolynomial.plan3rdProfileT(
						ElbowSpeed2Data[PositionNum][6],
						ElbowSpeed2Data[PositionNum + 1][5],
						ElbowSpeed2Data[PositionNum][3],
						ElbowSpeed2Data[PositionNum + 1][3],
						0, 0);
					PositionStatus = 1;
					//这里不需要加break，计算完插值表达式后就进入case1，给定角度。
				case 1:
					if ((MoveTimer >= ElbowSpeed2Data[PositionNum][6]) && (MoveTimer <= ElbowSpeed2Data[PositionNum + 1][5]))
					{
						//肩关节
						SetShoulderLevelShiftAngle = ShoulderLevelShiftPolynomial.pos(MoveTimer);
						SetShoulderRotateAngle = ShoulderRotatePolynomial.pos(MoveTimer);
						//肘关节
						double SetElbowAngle = ElbowPolynomial.pos(MoveTimer);
						elbow.SetTargetAngle(SetElbowAngle);
						//腕关节
						wrist_target_angle = WristPolynomial.pos(MoveTimer);
						//手
						if (ElbowSpeed2Data[PositionNum + 1][4] == 1)
						{
							HandHold = true;
						}
						else if (ElbowSpeed2Data[PositionNum + 1][4] == 0)
						{
							HandHold = false;
						}

					}
					else if (MoveTimer > ElbowSpeed2Data[PositionNum + 1][5])
					{
						//验证所有关节是否达到期望位置
						//这里判断方式有问题，因为角度可能存在超调，将会在第一次到达时认为到达目标点，而不是在稳定后认为到达目标点。
						if ((fabs_(AngleLevelShift - ElbowSpeed2Data[PositionNum + 1][0]) > 5))				//肩关节平移
						{
							ErrorCode = 2001;
							PositionStatus = 3;
						}
						//if ((fabs_(AngleRotate - ElbowSpeed2Data[PositionNum + 1][1]) > 5))			//肩关节旋转
						else if ((fabs_(AngleRotate - ElbowSpeed2Data[PositionNum + 1][1]) > 5))			//肩关节旋转
						{
							ErrorCode = 2101;
							PositionStatus = 3;
						}
						//if ((fabs_(elbow.ShowAngle() - NextPositionData[1]) > 5))			//肘关节
						else if ((fabs_(elbow.ShowAngle() - ElbowSpeed2Data[PositionNum + 1][2]) > 5))		//肘关节
						{
							ErrorCode = 2201;
							PositionStatus = 3;
						}
						//if ((fabs_(wrist_target_angle - ElbowSpeed2Data[PositionNum + 1][3]) > 5))	//腕关节
						else if ((fabs_(wrist_target_angle - ElbowSpeed2Data[PositionNum + 1][3]) > 5))		//腕关节
						{
							ErrorCode = 2301;
							PositionStatus = 3;
						}
						else
						{
							PositionStatus = 0;
							PositionNum++;
						}
					}
					break;
				case 3://错误处理
					break;
				default:
					break;
				}
			}
			else if (PositionNum >= PositionSize)
			{
				GlobalStatus = 20;
			}
			break;
		case 7:	//肘关节4度/秒
			if (PositionNum < PositionSize)
			{
				if (PositionNum == 1)
				{
					double stop = 1;
				}
				switch (PositionStatus)
				{
				case 0:	//计算多项式函数
					//肩关节平移
					ShoulderLevelShiftPolynomial.plan3rdProfileT(
						ElbowSpeed4Data[PositionNum][6],
						ElbowSpeed4Data[PositionNum + 1][5],
						ElbowSpeed4Data[PositionNum][0],
						ElbowSpeed4Data[PositionNum + 1][0],
						0, 0);
					//肩关节旋转
					ShoulderRotatePolynomial.plan3rdProfileT(
						ElbowSpeed4Data[PositionNum][6],
						ElbowSpeed4Data[PositionNum + 1][5],
						ElbowSpeed4Data[PositionNum][1],
						ElbowSpeed4Data[PositionNum + 1][1],
						0, 0);
					//肘关节平移
					ElbowPolynomial.plan3rdProfileT(
						ElbowSpeed4Data[PositionNum][6],
						ElbowSpeed4Data[PositionNum + 1][5],
						ElbowSpeed4Data[PositionNum][2],
						ElbowSpeed4Data[PositionNum + 1][2],
						0, 0);
					//腕关节平移
					WristPolynomial.plan3rdProfileT(
						ElbowSpeed4Data[PositionNum][6],
						ElbowSpeed4Data[PositionNum + 1][5],
						ElbowSpeed4Data[PositionNum][3],
						ElbowSpeed4Data[PositionNum + 1][3],
						0, 0);
					PositionStatus = 1;
					//这里不需要加break，计算完插值表达式后就进入case1，给定角度。
				case 1:
					if ((MoveTimer >= ElbowSpeed4Data[PositionNum][6]) && (MoveTimer <= ElbowSpeed4Data[PositionNum + 1][5]))
					{
						//肩关节
						SetShoulderLevelShiftAngle = ShoulderLevelShiftPolynomial.pos(MoveTimer);
						SetShoulderRotateAngle = ShoulderRotatePolynomial.pos(MoveTimer);
						//肘关节
						double SetElbowAngle = ElbowPolynomial.pos(MoveTimer);
						elbow.SetTargetAngle(SetElbowAngle);
						//腕关节
						wrist_target_angle = WristPolynomial.pos(MoveTimer);
						//手
						if (ElbowSpeed4Data[PositionNum + 1][4] == 1)
						{
							HandHold = true;
						}
						else if (ElbowSpeed4Data[PositionNum + 1][4] == 0)
						{
							HandHold = false;
						}

					}
					else if (MoveTimer > ElbowSpeed4Data[PositionNum + 1][5])
					{
						//验证所有关节是否达到期望位置
						//这里判断方式有问题，因为角度可能存在超调，将会在第一次到达时认为到达目标点，而不是在稳定后认为到达目标点。
						if ((fabs_(AngleLevelShift - ElbowSpeed4Data[PositionNum + 1][0]) > 5))				//肩关节平移
						{
							ErrorCode = 2001;
							PositionStatus = 3;
						}
						//if ((fabs_(AngleRotate - ElbowSpeed4Data[PositionNum + 1][1]) > 5))			//肩关节旋转
						else if ((fabs_(AngleRotate - ElbowSpeed4Data[PositionNum + 1][1]) > 5))			//肩关节旋转
						{
							ErrorCode = 2101;
							PositionStatus = 3;
						}
						//if ((fabs_(elbow.ShowAngle() - NextPositionData[1]) > 5))			//肘关节
						else if ((fabs_(elbow.ShowAngle() - ElbowSpeed4Data[PositionNum + 1][2]) > 5))		//肘关节
						{
							ErrorCode = 2201;
							PositionStatus = 3;
						}
						//if ((fabs_(wrist_target_angle - ElbowSpeed4Data[PositionNum + 1][3]) > 5))	//腕关节
						else if ((fabs_(wrist_target_angle - ElbowSpeed4Data[PositionNum + 1][3]) > 5))		//腕关节
						{
							ErrorCode = 2301;
							PositionStatus = 3;
						}
						else
						{
							PositionStatus = 0;
							PositionNum++;
						}
					}
					break;
				case 3://错误处理
					break;
				default:
					break;
				}
			}
			else if (PositionNum >= PositionSize)
			{
				GlobalStatus = 20;
			}
			break;
		case 8:	//肘关节6度/秒
			if (PositionNum < PositionSize)
			{
				if (PositionNum == 1)
				{
					double stop = 1;
				}
				switch (PositionStatus)
				{
				case 0:	//计算多项式函数
					//肩关节平移
					ShoulderLevelShiftPolynomial.plan3rdProfileT(
						ElbowSpeed6Data[PositionNum][6],
						ElbowSpeed6Data[PositionNum + 1][5],
						ElbowSpeed6Data[PositionNum][0],
						ElbowSpeed6Data[PositionNum + 1][0],
						0, 0);
					//肩关节旋转
					ShoulderRotatePolynomial.plan3rdProfileT(
						ElbowSpeed6Data[PositionNum][6],
						ElbowSpeed6Data[PositionNum + 1][5],
						ElbowSpeed6Data[PositionNum][1],
						ElbowSpeed6Data[PositionNum + 1][1],
						0, 0);
					//肘关节平移
					ElbowPolynomial.plan3rdProfileT(
						ElbowSpeed6Data[PositionNum][6],
						ElbowSpeed6Data[PositionNum + 1][5],
						ElbowSpeed6Data[PositionNum][2],
						ElbowSpeed6Data[PositionNum + 1][2],
						0, 0);
					//腕关节平移
					WristPolynomial.plan3rdProfileT(
						ElbowSpeed6Data[PositionNum][6],
						ElbowSpeed6Data[PositionNum + 1][5],
						ElbowSpeed6Data[PositionNum][3],
						ElbowSpeed6Data[PositionNum + 1][3],
						0, 0);
					PositionStatus = 1;
					//这里不需要加break，计算完插值表达式后就进入case1，给定角度。
				case 1:
					if ((MoveTimer >= ElbowSpeed6Data[PositionNum][6]) && (MoveTimer <= ElbowSpeed6Data[PositionNum + 1][5]))
					{
						//肩关节
						SetShoulderLevelShiftAngle = ShoulderLevelShiftPolynomial.pos(MoveTimer);
						SetShoulderRotateAngle = ShoulderRotatePolynomial.pos(MoveTimer);
						//肘关节
						double SetElbowAngle = ElbowPolynomial.pos(MoveTimer);
						elbow.SetTargetAngle(SetElbowAngle);
						//腕关节
						wrist_target_angle = WristPolynomial.pos(MoveTimer);
						//手
						if (ElbowSpeed6Data[PositionNum + 1][4] == 1)
						{
							HandHold = true;
						}
						else if (ElbowSpeed6Data[PositionNum + 1][4] == 0)
						{
							HandHold = false;
						}

					}
					else if (MoveTimer > ElbowSpeed6Data[PositionNum + 1][5])
					{
						//验证所有关节是否达到期望位置
						//这里判断方式有问题，因为角度可能存在超调，将会在第一次到达时认为到达目标点，而不是在稳定后认为到达目标点。
						if ((fabs_(AngleLevelShift - ElbowSpeed6Data[PositionNum + 1][0]) > 5))				//肩关节平移
						{
							ErrorCode = 2001;
							PositionStatus = 3;
						}
						//if ((fabs_(AngleRotate - ElbowSpeed6Data[PositionNum + 1][1]) > 5))			//肩关节旋转
						else if ((fabs_(AngleRotate - ElbowSpeed6Data[PositionNum + 1][1]) > 5))			//肩关节旋转
						{
							ErrorCode = 2101;
							PositionStatus = 3;
						}
						//if ((fabs_(elbow.ShowAngle() - NextPositionData[1]) > 5))			//肘关节
						else if ((fabs_(elbow.ShowAngle() - ElbowSpeed6Data[PositionNum + 1][2]) > 5))		//肘关节
						{
							ErrorCode = 2201;
							PositionStatus = 3;
						}
						//if ((fabs_(wrist_target_angle - ElbowSpeed6Data[PositionNum + 1][3]) > 5))	//腕关节
						else if ((fabs_(wrist_target_angle - ElbowSpeed6Data[PositionNum + 1][3]) > 5))		//腕关节
						{
							ErrorCode = 2301;
							PositionStatus = 3;
						}
						else
						{
							PositionStatus = 0;
							PositionNum++;
						}
					}
					break;
				case 3://错误处理
					break;
				default:
					break;
				}
			}
			else if (PositionNum >= PositionSize)
			{
				GlobalStatus = 20;
			}
			break;
		case 9:	//腕关节60度
			if (PositionNum < PositionSize)
			{
				if (PositionNum == 1)
				{
					double stop = 1;
				}
				switch (PositionStatus)
				{
				case 0:	//计算多项式函数
					//肩关节平移
					ShoulderLevelShiftPolynomial.plan3rdProfileT(
						WristSixtyAngle[PositionNum][6],
						WristSixtyAngle[PositionNum + 1][5],
						WristSixtyAngle[PositionNum][0],
						WristSixtyAngle[PositionNum + 1][0],
						0, 0);
					//肩关节旋转
					ShoulderRotatePolynomial.plan3rdProfileT(
						WristSixtyAngle[PositionNum][6],
						WristSixtyAngle[PositionNum + 1][5],
						WristSixtyAngle[PositionNum][1],
						WristSixtyAngle[PositionNum + 1][1],
						0, 0);
					//肘关节平移
					ElbowPolynomial.plan3rdProfileT(
						WristSixtyAngle[PositionNum][6],
						WristSixtyAngle[PositionNum + 1][5],
						WristSixtyAngle[PositionNum][2],
						WristSixtyAngle[PositionNum + 1][2],
						0, 0);
					//腕关节平移
					WristPolynomial.plan3rdProfileT(
						WristSixtyAngle[PositionNum][6],
						WristSixtyAngle[PositionNum + 1][5],
						WristSixtyAngle[PositionNum][3],
						WristSixtyAngle[PositionNum + 1][3],
						0, 0);
					PositionStatus = 1;
					//这里不需要加break，计算完插值表达式后就进入case1，给定角度。
				case 1:
					if ((MoveTimer >= WristSixtyAngle[PositionNum][6]) && (MoveTimer <= WristSixtyAngle[PositionNum + 1][5]))
					{
						//肩关节
						SetShoulderLevelShiftAngle = ShoulderLevelShiftPolynomial.pos(MoveTimer);
						SetShoulderRotateAngle = ShoulderRotatePolynomial.pos(MoveTimer);
						//肘关节
						double SetElbowAngle = ElbowPolynomial.pos(MoveTimer);
						elbow.SetTargetAngle(SetElbowAngle);
						//腕关节
						wrist_target_angle = WristPolynomial.pos(MoveTimer);
						//手
						if (WristSixtyAngle[PositionNum + 1][4] == 1)
						{
							HandHold = true;
						}
						else if (WristSixtyAngle[PositionNum + 1][4] == 0)
						{
							HandHold = false;
						}

					}
					else if (MoveTimer > WristSixtyAngle[PositionNum + 1][5])
					{
						//验证所有关节是否达到期望位置
						//这里判断方式有问题，因为角度可能存在超调，将会在第一次到达时认为到达目标点，而不是在稳定后认为到达目标点。
						if ((fabs_(AngleLevelShift - WristSixtyAngle[PositionNum + 1][0]) > 5))				//肩关节平移
						{
							ErrorCode = 2001;
							PositionStatus = 3;
						}
						//if ((fabs_(AngleRotate - WristSixtyAngle[PositionNum + 1][1]) > 5))			//肩关节旋转
						else if ((fabs_(AngleRotate - WristSixtyAngle[PositionNum + 1][1]) > 5))			//肩关节旋转
						{
							ErrorCode = 2101;
							PositionStatus = 3;
						}
						//if ((fabs_(elbow.ShowAngle() - NextPositionData[1]) > 5))			//肘关节
						else if ((fabs_(elbow.ShowAngle() - WristSixtyAngle[PositionNum + 1][2]) > 5))		//肘关节
						{
							ErrorCode = 2201;
							PositionStatus = 3;
						}
						//if ((fabs_(wrist_target_angle - WristSixtyAngle[PositionNum + 1][3]) > 5))	//腕关节
						else if ((fabs_(wrist_target_angle - WristSixtyAngle[PositionNum + 1][3]) > 5))		//腕关节
						{
							ErrorCode = 2301;
							PositionStatus = 3;
						}
						else
						{
							PositionStatus = 0;
							PositionNum++;
						}
					}
					break;
				case 3://错误处理
					break;
				default:
					break;
				}
			}
			else if (PositionNum >= PositionSize)
			{
				GlobalStatus = 20;
			}
			break;
		case 10:	//手抓取80s
			if (PositionNum < PositionSize)
			{
				if (PositionNum == 1)
				{
					double stop = 1;
				}
				switch (PositionStatus)
				{
				case 0:	//计算多项式函数
					//肩关节平移
					ShoulderLevelShiftPolynomial.plan3rdProfileT(
						HandHoldData[PositionNum][6],
						HandHoldData[PositionNum + 1][5],
						HandHoldData[PositionNum][0],
						HandHoldData[PositionNum + 1][0],
						0, 0);
					//肩关节旋转
					ShoulderRotatePolynomial.plan3rdProfileT(
						HandHoldData[PositionNum][6],
						HandHoldData[PositionNum + 1][5],
						HandHoldData[PositionNum][1],
						HandHoldData[PositionNum + 1][1],
						0, 0);
					//肘关节平移
					ElbowPolynomial.plan3rdProfileT(
						HandHoldData[PositionNum][6],
						HandHoldData[PositionNum + 1][5],
						HandHoldData[PositionNum][2],
						HandHoldData[PositionNum + 1][2],
						0, 0);
					//腕关节平移
					WristPolynomial.plan3rdProfileT(
						HandHoldData[PositionNum][6],
						HandHoldData[PositionNum + 1][5],
						HandHoldData[PositionNum][3],
						HandHoldData[PositionNum + 1][3],
						0, 0);
					PositionStatus = 1;
					//这里不需要加break，计算完插值表达式后就进入case1，给定角度。
				case 1:
					if ((MoveTimer >= HandHoldData[PositionNum][6]) && (MoveTimer <= HandHoldData[PositionNum + 1][5]))
					{
						//肩关节
						SetShoulderLevelShiftAngle = ShoulderLevelShiftPolynomial.pos(MoveTimer);
						SetShoulderRotateAngle = ShoulderRotatePolynomial.pos(MoveTimer);
						//肘关节
						double SetElbowAngle = ElbowPolynomial.pos(MoveTimer);
						elbow.SetTargetAngle(SetElbowAngle);
						//腕关节
						wrist_target_angle = WristPolynomial.pos(MoveTimer);
						//手
						if (HandHoldData[PositionNum + 1][4] == 1)
						{
							HandHold = true;
						}
						else if (HandHoldData[PositionNum + 1][4] == 0)
						{
							HandHold = false;
						}

					}
					else if (MoveTimer > HandHoldData[PositionNum + 1][5])
					{
						//验证所有关节是否达到期望位置
						//这里判断方式有问题，因为角度可能存在超调，将会在第一次到达时认为到达目标点，而不是在稳定后认为到达目标点。
						if ((fabs_(AngleLevelShift - HandHoldData[PositionNum + 1][0]) > 5))				//肩关节平移
						{
							ErrorCode = 2001;
							PositionStatus = 3;
						}
						//if ((fabs_(AngleRotate - HandHoldData[PositionNum + 1][1]) > 5))			//肩关节旋转
						else if ((fabs_(AngleRotate - HandHoldData[PositionNum + 1][1]) > 5))			//肩关节旋转
						{
							ErrorCode = 2101;
							PositionStatus = 3;
						}
						//if ((fabs_(elbow.ShowAngle() - NextPositionData[1]) > 5))			//肘关节
						else if ((fabs_(elbow.ShowAngle() - HandHoldData[PositionNum + 1][2]) > 5))		//肘关节
						{
							ErrorCode = 2201;
							PositionStatus = 3;
						}
						//if ((fabs_(wrist_target_angle - HandHoldData[PositionNum + 1][3]) > 5))	//腕关节
						else if ((fabs_(wrist_target_angle - HandHoldData[PositionNum + 1][3]) > 5))		//腕关节
						{
							ErrorCode = 2301;
							PositionStatus = 3;
						}
						else
						{
							PositionStatus = 0;
							PositionNum++;
						}
					}
					break;
				case 3://错误处理
					break;
				default:
					break;
				}
			}
			else if (PositionNum >= PositionSize)
			{
				GlobalStatus = 20;
			}
			break;
		case 20:	//判断程序是否重复执行
			if (m_PlcToCpp.IsRepeat)
			{
				PositionNum = 0;
				GlobalStatus = 0;
			}
			break;
		}

		RobotArmRun();		//各个关节赋值
		UpdateOutputs();
	}
	return hr;
}
///</AutoGeneratedContent>

double CRobotArmMain::wrist_angle_out(double resistor)
{
	return (k*resistor + b - wrist_init_angle);
}

int CRobotArmMain::wrist_motion(double target)//返回腕关节运动完成标志位
{
	int flag;
	wrist_fact_angle = wrist_angle_out(m_Inputs.wrist_resistor); m_Inputs.wrist_angle = m_CppToPlc.wrist_angle = wrist_fact_angle;//传递实际角度
	wrist_pwm_out = wrist_pid_control.pid_control(target, wrist_fact_angle); /*m_CppToPlc.wrist_error = target - wrist_fact_angle;//传递误差*/
	if (wrist_fact_angle <= wrist_angle_max)//腕关节角度限位
	{
		if (wrist_pwm_out >= wrist_pwm_min && wrist_pwm_out <= wrist_pwm_max)//腕关节pwm限位
		{
			m_Outputs.wrist_one = m_Outputs.wrist_two = static_cast<int>(wrist_pwm_out)+30;
			m_Outputs.wrist_three = m_Outputs.wrist_four = static_cast<int>(wrist_pwm_out);
			m_Outputs.wrist_five = m_Outputs.wrist_six = static_cast<int>(wrist_pwm_out)+50;
			m_Outputs.wrist_seven = m_Outputs.wrist_eight = static_cast<int>(wrist_pwm_out);
		}
		else if (wrist_pwm_out > wrist_pwm_max)//腕关节pwm限位
		{
			m_Outputs.wrist_one = m_Outputs.wrist_two = static_cast<int>(wrist_pwm_max)+30;
			m_Outputs.wrist_three = m_Outputs.wrist_four = static_cast<int>(wrist_pwm_max);
			m_Outputs.wrist_five = m_Outputs.wrist_six = static_cast<int>(wrist_pwm_max)+50;
			m_Outputs.wrist_seven = m_Outputs.wrist_eight = static_cast<int>(wrist_pwm_max);
		}
		else if (wrist_pwm_out < wrist_pwm_min)//腕关节pwm限位
		{
			m_Outputs.wrist_one = m_Outputs.wrist_two = static_cast<int>(wrist_pwm_min);
			m_Outputs.wrist_three = m_Outputs.wrist_four = static_cast<int>(wrist_pwm_min);
			m_Outputs.wrist_five = m_Outputs.wrist_six = static_cast<int>(wrist_pwm_min);
			m_Outputs.wrist_seven = m_Outputs.wrist_eight = static_cast<int>(wrist_pwm_min);
		}
	}
	else//腕关节角度限位
	{
		m_Outputs.wrist_one = m_Outputs.wrist_two = static_cast<int>(wrist_pwm_min);
		m_Outputs.wrist_three = m_Outputs.wrist_four = static_cast<int>(wrist_pwm_min);
		m_Outputs.wrist_five = m_Outputs.wrist_six = static_cast<int>(wrist_pwm_min);
		m_Outputs.wrist_seven = m_Outputs.wrist_eight = static_cast<int>(wrist_pwm_min);
	}
	m_CppToPlc.wrist_pwm = m_Outputs.wrist_four;//传递pwm输出
	wrist_error = fabs_(wrist_fact_angle - target);
	if (wrist_error <= 1 || wrist_fact_angle >= target)//延时检测
	{
		++i;
		if (wrist_error <= 1 && i >= 500)//到达预期角度判定
			flag = 1;
		else
			flag = 0;
	}
	else
	{
		flag = 0;
	}
	return (flag);
}

double CRobotArmMain::hand_temp_out(double num)
{
	return(temp_k*num + temp_b);
}
void CRobotArmMain::hand_motion(int time_one, int time_two, int time_three, int time_four)
{
	m_CppToPlc.hand_one_temp = m_Inputs.hand_one_temp; m_CppToPlc.hand_two_temp = m_Inputs.hand_two_temp;//手部温度变量传递
	m_CppToPlc.hand_three_temp = m_Inputs.hand_three_temp; m_CppToPlc.hand_four_temp = m_Inputs.hand_four_temp;//手部温度变量传递
	m_CppToPlc.hand_one_pwm = m_Outputs.hand_one; m_CppToPlc.hand_two_pwm = m_Outputs.hand_two;//手部pwm变量传递
	m_CppToPlc.hand_three_pwm = m_Outputs.hand_three; m_CppToPlc.hand_four_pwm = m_Outputs.hand_four;//手部pwm变量传递
	/////////////////////////////////////////////hand_one////////////////////////////////////////////////
	if (hand_temp_out(m_Inputs.hand_one_temp) > 30)
	{
		switch (time_one)
		{
		case 0: m_Outputs.hand_one = 550; break;
		case 400: m_Outputs.hand_one = 420; break;
		case 550: time_one = -1; break;
		default:break;
		}
		time_one = time_one + 1;
		m_Outputs.hand_fan = 16000;
	}
	else
	{
		m_Outputs.hand_one = 580;
		m_Outputs.hand_fan = 0;
	}
	/////////////////////////////////////////////hand_one/////////////////////////////////////////////////////////////

	////////////////////////////////////////////hand_two///////////////////////////////////////////////	
	if (hand_temp_out(m_Inputs.hand_two_temp) > 32)
	{
		switch (time_two)
		{
		case 0: m_Outputs.hand_two = 580; break;
		case 400: m_Outputs.hand_two = 400; break;
		case 450: time_two = -1; break;
		default:break;
		}
		time_two = time_two + 1;
		m_Outputs.hand_fan = 16000;
	}
	else
	{
		m_Outputs.hand_two = 600;
		m_Outputs.hand_fan = 0;
	}
	/////////////////////////////////////////////////////////hand_two///////////////////////

	///////////////////////////////////////////////////////hand_three//////////////////////////	
	if (hand_temp_out(m_Inputs.hand_three_temp) > 30)
	{
		switch (time_three)
		{
		case 0: m_Outputs.hand_three = 500; break;
		case 400: m_Outputs.hand_three = 400; break;
		case 450: time_three = -1; break;
		default:break;
		}
		time_three = time_three + 1;
		m_Outputs.hand_fan = 16000;
	}
	else
	{
		m_Outputs.hand_three = 580;
		m_Outputs.hand_fan = 0;
	}
	/////////////////////////////////////////////////hand_three////////////////////////////////

	//////////////////////////////////////////////hand_four///////////////////////////////////
	if (hand_temp_out(m_Inputs.hand_four_temp) > 33)
	{
		switch (time_four)
		{
		case 0: m_Outputs.hand_four = 600; break;
		case 400: m_Outputs.hand_four = 450; break;
		case 450: time_four = -1; break;
		default:break;
		}
		time_four = time_four + 1;
		m_Outputs.hand_fan = 16000;
	}
	else
	{
		m_Outputs.hand_four = 650;
		m_Outputs.hand_fan = 0;
	}
	///////////////////////////////////////hand_four///////////////////////////////////////////
}

void CRobotArmMain::UpdateInputs()
{
	GlobalTime = m_PlcToCpp.Timer;
	MoveTimer = GlobalTime - MoveStartTime;
	ElbowUpdateInputs();

	ShoulderElbowUpdateInputs();
}

void CRobotArmMain::UpdateOutputs()
{
	ElbowUpdateOutputs();

	ShoulderUpdateOutputs();

	m_CppToPlc.ErrorCode = ErrorCode;
}

void CRobotArmMain::ShoulderElbowUpdateInputs()
{
	AngleRotate = -m_PlcToCpp.PosRotate / 23.0 * 90.0;
	AngleLevelShift = m_PlcToCpp.PosLevelShift / 23.0 * 90.0 + 0.5 * (AngleRotate);
	ShoulderInitFinish = m_PlcToCpp.ShoulderInitFinish;
}

void CRobotArmMain::ShoulderUpdateOutputs()
{
	m_CppToPlc.TarPosLevelShift = TarPosLevelShift;
	m_CppToPlc.TarPosRotate = TarPosRotate;
}

void CRobotArmMain::ShoulderSetTarAngle(double LevelShiftAngle, double RotateAngle)
{
	//旋转和平移，只旋转动的话，耦合比：旋转：平移=2：1，若还要增加平移，则在比值右边增加。
	TarPosRotate = -RotateAngle / 90.0 * 23.0;
	TarPosLevelShift = TarPosRotate / 2 + LevelShiftAngle / 90 * 23.0;
}

void CRobotArmMain::ElbowUpdateInputs()
{
	//if (m_PlcToCpp.ElbowAngle < 200)//旧的肘会出现过零点状况
	//{
	//	elbow.GetActualAngle(m_PlcToCpp.ElbowAngle + 360 - 261);
	//}
	//else if (m_PlcToCpp.ElbowAngle >= 200)
	//{
	//elbow.GetActualAngle(m_PlcToCpp.ElbowAngle - 261);//不受力状态时，角度为261，减去，角度会增大//旧的肘
	//}

	elbow.GetActualAngle(351 - m_PlcToCpp.ElbowAngle);//不受力状态时，角度为350，减去，角度会减少//新的肘

}

void CRobotArmMain::ElbowUpdateOutputs()
{
	/* 输出给EL4004，用来控制比例压力阀。压力阀接收电压为0-10V */
	//电压转换为（0-10V）->（0-32767）
	if ((elbow.ShowM1() <= 3.5) && (elbow.ShowM2() <= 3.5))
	{
		m_Outputs.ElbowOutM1 = static_cast<int>(elbow.ShowM1() / 10.0 * 32767.0);
		m_Outputs.ElbowOutM2 = static_cast<int>(elbow.ShowM2() / 10.0 * 32767.0);
	}
	else if (elbow.ShowM1() > 3.5)
	{
		m_Outputs.ElbowOutM1 = static_cast<int>(3.0 / 10.0 * 32767.0);
	}
	else if (elbow.ShowM2() > 3.5)
	{
		m_Outputs.ElbowOutM2 = static_cast<int>(3.0 / 10.0 * 32767.0);
	}
	else
	{
		m_Outputs.ElbowOutM1 = 0;
		m_Outputs.ElbowOutM2 = 0;
	}

	///* 输出个PLC用来观察的 */
	//if (elbow.ShowAngle() > 0)
	{
		m_CppToPlc.ElbowTarAngle = elbow.ShowTarAngle();
		m_CppToPlc.ElbowAngle = elbow.ShowAngle();
	}
	//m_Outputs.m1v = elbow.ShowM1();
	//m_Outputs.m2v = elbow.ShowM2();
}

void CRobotArmMain::RobotArmRun()
{
	ShoulderSetTarAngle(SetShoulderLevelShiftAngle, SetShoulderRotateAngle);
	if (m_PlcToCpp.StopElbow == false)
	{
		if (ElbowInitFinish == true)
		{
			//正常运行
			ElbowStopStatus = 0;
			elbow.run();
		}
	}
	else if (m_PlcToCpp.StopElbow == true)
	{
		//气动停止放气
		switch (ElbowStopStatus)
		{
		case 0:
			ElbowStopStartTime = GlobalTime;
			ElbowStopStatus = 1;
			ElbowStopStartM1 = elbow.ShowM1();
			ElbowStopStartM2 = elbow.ShowM2();
		case 1:
			if ((GlobalTime - ElbowStopStartTime) < 5)
			{
				elbow.SetM1(ElbowStopStartM1 / 5.0 * (ElbowStopStartTime + 5 - GlobalTime));
				elbow.SetM2(ElbowStopStartM2 / 5.0 * (ElbowStopStartTime + 5 - GlobalTime));
			}
			else if ((GlobalTime - ElbowStopStartTime) > 5)
			{
				ElbowInitFinish = false;
				//结束
			}
		}
	}

	if (m_PlcToCpp.StopWrist == false)
	{
		//腕关节运动
		wrist_motion_flag = wrist_motion(wrist_target_angle);//wrist_target_angle
		m_CppToPlc.wrist_tarAngle = wrist_target_angle;
		m_CppToPlc.wrist_angle = wrist_angle_out(m_Inputs.wrist_resistor);
	}
	else if (m_PlcToCpp.StopWrist == true)
	{
		//合金丝关闭供电
		m_Outputs.wrist_one = m_Outputs.wrist_two = static_cast<int>(wrist_pwm_min);
		m_Outputs.wrist_three = m_Outputs.wrist_four = static_cast<int>(wrist_pwm_min);
		m_Outputs.wrist_five = m_Outputs.wrist_six = static_cast<int>(wrist_pwm_min);
		m_Outputs.wrist_seven = m_Outputs.wrist_eight = static_cast<int>(wrist_pwm_min);
	}

	if (m_PlcToCpp.StopHand == false)
	{
		//合金丝关闭供电
		if (HandHold == true)
		{
			hand_motion(time_one, time_two, time_three, time_four);
		}
		else
		{
			m_Outputs.hand_one = 0;//手部关闭
			m_Outputs.hand_two = 0;
			m_Outputs.hand_three = 0;
			m_Outputs.hand_four = 0;
			m_Outputs.hand_fan = 0;
		}
	}
	else if (m_PlcToCpp.StopHand == true)
	{
		//手部关闭
		m_Outputs.hand_one = 0;
		m_Outputs.hand_two = 0;
		m_Outputs.hand_three = 0;
		m_Outputs.hand_four = 0;
		m_Outputs.hand_fan = 0;
	}
}
///////////////////////////////////////////////////////////////////////////////
HRESULT CRobotArmMain::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CRobotArmMain::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}


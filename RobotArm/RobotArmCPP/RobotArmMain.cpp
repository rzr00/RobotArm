///////////////////////////////////////////////////////////////////////////////
// RobotArmMain.cpp
#include "TcPch.h"
#pragma hdrstop

#include "RobotArmMain.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CRobotArmMain
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CRobotArmMain
BEGIN_INTERFACE_MAP(CRobotArmMain)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CRobotArmMain)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CRobotArmMain)
IMPLEMENT_ITCADI(CRobotArmMain)
IMPLEMENT_ITCWATCHSOURCE(CRobotArmMain)


///////////////////////////////////////////////////////////////////////////////
// Set parameters of CRobotArmMain 
BEGIN_SETOBJPARA_MAP(CRobotArmMain)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_RobotArmMainParameter, m_Parameter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CRobotArmMain 
BEGIN_GETOBJPARA_MAP(CRobotArmMain)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_RobotArmMainParameter, m_Parameter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CRobotArmMain
BEGIN_OBJPARAWATCH_MAP(CRobotArmMain)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CRobotArmMain
BEGIN_OBJDATAAREA_MAP(CRobotArmMain)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_RobotArmMainInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_RobotArmMainOutputs, m_Outputs)
	OBJDATAAREA_VALUE(ADI_RobotArmMainPlcToCpp, m_PlcToCpp)
	OBJDATAAREA_VALUE(ADI_RobotArmMainCppToPlc, m_CppToPlc)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CRobotArmMain::CRobotArmMain()
	: m_Trace(m_TraceLevelMax, m_spSrv)
	, pi(3.14159)
	, k(0.0301)
	, b(-176.84)
	, temp_k(-0.0055)
	, temp_b(67.3)
	, i(0)
//	, PositionSize(3 - 1)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Parameter, 0, sizeof(m_Parameter));
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
	memset(&m_PlcToCpp, 0, sizeof(m_PlcToCpp));
	memset(&m_CppToPlc, 0, sizeof(m_CppToPlc));
///</AutoGeneratedContent>
	ErrorCode = 0;
//	PositionSize = 3 - 1;
	PositionNum = 0;
	PositionStatus = 0;
	InitElbowStatus = 0;
	StopStatus = 0;
	StopStartTime = 0;
	StopStartM1 = 0;
	StopStartM2 = 0;
	//for (int i = 0; i < 100; i++)
	//{
	//	CurrentPositionData[i] = 0;
	//	NextPositionData[i] = 0;
	//}
	//for (int i = 0; i < 100; i++)
	//{
	//	for (int j = 0; j < 5; j++)
	//	{
	//		KinematicsInverseData[i][j] = 0;
	//	}
	//}

	wrist_pwm_max = 1000;//设定腕关节pwm输出最大值
	wrist_pwm_min = 0;//设定腕关节pwm输出最小值
	wrist_angle_max = 62;//设定腕关节角度最大值
	wrist_error = .0;//设定腕关节角度最小值
	wrist_motion_flag = 0;//腕关节到达预期位置标志位
	hand_grip_time = 0;//手部抓握时间
	time_one = time_two = time_three = time_four = 0;
}

///////////////////////////////////////////////////////////////////////////////
CRobotArmMain::~CRobotArmMain() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CRobotArmMain)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CRobotArmMain::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	// TODO: Add initialization code

	PositionSize = 6 - 1;

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CRobotArmMain::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CRobotArmMain::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	// TODO: Add any additional deinitialization

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CRobotArmMain::SetObjStateSP()
{
	HRESULT hr = S_OK;
	m_Trace.Log(tlVerbose, FENTERA);

	// TODO: Add deinitialization code

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

double KinematicsForwardData[100][5] = { { 0, 0, 0, 5, 5 }, { 70, 100, 0, 25, 30 }, { 70, 100, 48, 55, 65 }, { 0, 0, 48, 80, 85 }, { 0, 0, 0, 90, 100 } };	//正解数据值:肩、肘、腕角度、到达时间、离开时间
//double ElbowSpeed = 5;		//角度/秒

int init_flag = 1;
PID_Position wrist_pid_control(30, 1.3, 0.5, 0.01);//腕关节参数设置，前三项为pid参数，最后一项为周期
///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CRobotArmMain::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// TODO: Replace the sample with your cyclic code
	UpdateInputs();
	if ((m_PlcToCpp.PlcStarted == true) && (m_PlcToCpp.ShoudlerInitFinish == true) && (m_PlcToCpp.LevelShiftExtEnabled == true))
	{
		if ((timer > 0) && (timer < 5))      //肘关节初始化
		{
			elbow.SetM1(3.5 / 5.0 * timer);
			elbow.SetM2(0.2 / 5.0 * timer);
			if (init_flag == 1)
			{
				wrist_init_angle = k*m_Inputs.wrist_resistor + b;
				init_flag = 0;
			}
		}
		else if ((timer > 5) && (init_flag == 0))
		{
			if (PositionNum < PositionSize)
			{
				switch (PositionStatus)
				{
				case 0:	//反解角度，计算插值函数
					if (PositionNum == 0)
					{
						////初始状态正解
						//kinematics_forward(
						//	KinematicsInverseData[0],
						//	KinematicsForwardData[0]);
						////初始状态逆解
						//kinematics_inverse(
						//	KinematicsInverseData[0][0],
						//	KinematicsInverseData[0][1],
						//	KinematicsInverseData[0][2],
						//	CurrentPositionData);
						//////拷贝时间
						////KinematicsInverseData[0][3] = 5;
						////KinematicsInverseData[0][4] = 10;
						////拷贝时间
						//KinematicsInverseData[0][3] = KinematicsForwardData[0][3];
						//KinematicsInverseData[0][4] = KinematicsForwardData[0][4];

						//拷贝当前位置数据
						for (int i = 0; i < 3; i++)
						{
							CurrentPositionData[i] = KinematicsForwardData[0][i];
						}
					}
					////运动时间计算。根据肘关节速度计算
					//KinematicsInverseData[PositionNum + 1][3] = KinematicsInverseData[PositionNum][4] +
					//	fabs_(KinematicsForwardData[PositionNum + 1][0] - KinematicsForwardData[PositionNum][0]) / ElbowSpeed;
					//KinematicsInverseData[PositionNum + 1][4] = KinematicsInverseData[PositionNum + 1][3] + 5;
					////拷贝时间
					//KinematicsInverseData[PositionNum + 1][3] = KinematicsForwardData[PositionNum + 1][3];
					//KinematicsInverseData[PositionNum + 1][4] = KinematicsForwardData[PositionNum + 1][4];
					////正解
					//kinematics_forward(
					//	KinematicsInverseData[PositionNum + 1],
					//	KinematicsForwardData[PositionNum + 1]);
					////反解
					//kinematics_inverse(
					//	KinematicsInverseData[PositionNum + 1][0],
					//	KinematicsInverseData[PositionNum + 1][1],
					//	KinematicsInverseData[PositionNum + 1][2],
					//	NextPositionData);
					//拷贝下次位置数据
					for (int i = 0; i < 3; i++)
					{
						NextPositionData[i] = KinematicsForwardData[PositionNum + 1][i];
					}
					//肩关节平移
					ShoulderLevelShiftPolynomial.plan3rdProfileT(
						KinematicsForwardData[PositionNum][4],
						KinematicsForwardData[PositionNum + 1][3],
						CurrentPositionData[0],
						NextPositionData[0],
						0, 0);
					//肘关节平移
					ElbowPolynomial.plan3rdProfileT(
						KinematicsForwardData[PositionNum][4],
						KinematicsForwardData[PositionNum + 1][3],
						CurrentPositionData[1],
						NextPositionData[1],
						0, 0);
					//腕关节平移
					WristPolynomial.plan3rdProfileT(
						KinematicsForwardData[PositionNum][4],
						KinematicsForwardData[PositionNum + 1][3],
						CurrentPositionData[2],
						NextPositionData[2],
						0, 0);
					PositionStatus = 1;
					//这里不需要加break，计算完插值表达式后就进入case1，给定角度。
				case 1:
					if ((timer > KinematicsForwardData[PositionNum][4]) && (timer < KinematicsForwardData[PositionNum + 1][3]))
					{
						double SetElbowAngle = ElbowPolynomial.pos(timer);
						elbow.SetTargetAngle(SetElbowAngle);
						//elbow.run();
						double SetShoulderLevelShiftAngle = ShoulderLevelShiftPolynomial.pos(timer);
						//double SetShoulderRotateAngle = WristPolynomial.pos(timer);
						ShoulderSetTarAngle(SetShoulderLevelShiftAngle, 0);

						wrist_target_angle = WristPolynomial.pos(timer);

					}
					else if (timer > KinematicsForwardData[PositionNum + 1][3])
					{
						//验证所有关节是否达到期望位置
						if ((fabs_(AngleLevelShift - NextPositionData[0]) > 5))				//肩关节平移
						{
							ErrorCode = 1;
							PositionStatus = 3;
						}
						//else if ((fabs_(AngleRotate - NextPositionData[2]) > 5))			//肩关节旋转
						//{
						//	ErrorCode = 2;
						//	PositionStatus = 3;
						//}
						//if ((fabs_(elbow.ShowAngle() - NextPositionData[1]) > 5))		//肘关节
						else if ((fabs_(elbow.ShowAngle() - NextPositionData[1]) > 5))		//肘关节
						{
							ErrorCode = 3;
							PositionStatus = 3;
						}
						else  																//这里判断方式有问题，因为角度可能存在超调，将会在第一次到达时认为到达目标点，而不是在稳定后认为到达目标点。
						{
							PositionStatus = 0;
							PositionNum++;
							for (int i = 0; i < 3; i++)
							{
								CurrentPositionData[i] = NextPositionData[i];				//各个关节都走到目标位置，则将目标位置拷贝至当前位置
							}
						}
					}
					break;
				case 3://错误处理
					break;
				default:
					break;
				}
			}
			if (m_PlcToCpp.StopElbow == true)
			{
				//气动结束放气
				switch (StopStatus)
				{
				case 0:
					StopStartTime = timer;
					StopStatus = 1;
					StopStartM1 = elbow.ShowM1();
					StopStartM2 = elbow.ShowM2();
				case 1:
					if ((timer - StopStartTime) < 5)
					{
						elbow.SetM1(StopStartM1 / 5.0 * (StopStartTime + 5 - timer));
						elbow.SetM2(StopStartM2 / 5.0 * (StopStartTime + 5 - timer));
					}
					else if ((timer - StopStartTime) > 5)
					{
						//结束
					}
				}
			}
			else
			{
				elbow.run();
			}
			//腕关节运动
			wrist_motion_flag = wrist_motion(wrist_target_angle);//wrist_target_angle
			m_CppToPlc.wrist_tarAngle = wrist_target_angle;
			m_CppToPlc.wrist_angle = wrist_angle_out(m_Inputs.wrist_resistor);
		}

		//手控制
		if ((timer > 55) && (timer < 80))
		{
			hand_motion(time_one, time_two, time_three, time_four);
		}
		else
		{
			m_Outputs.hand_one = 0;//手部关闭
			m_Outputs.hand_two = 0;
			m_Outputs.hand_three = 0;
			m_Outputs.hand_four = 0;
			m_Outputs.hand_fan = 0;
			//i = 0;//腕关节角度检测延迟归位
		}

		UpdateOutputs();
	}

	//if (m_PlcToCpp.PlcStarted == true)
	//{
	//	if (init_flag == 1)
	//	{
	//		wrist_init_angle = k*m_Inputs.wrist_resistor + b;
	//		init_flag = 0;
	//	}

	//	if ((m_PlcToCpp.Timer > 1) && (m_PlcToCpp.Timer < 15))
	//	{
	//		wrist_target_angle = 2 * (m_PlcToCpp.Timer - 1);
	//	}
	//	wrist_motion_flag = wrist_motion(wrist_target_angle);//wrist_target_angle
	//	//else if ((m_PlcToCpp.Timer > 26) && (m_PlcToCpp.Timer < 36))
	//	//{
	//	//	wrist_target_angle = 2 * (26 - 1);
	//	//	wrist_motion_flag = wrist_motion(wrist_target_angle);
	//	//}
	//	//else if ((m_PlcToCpp.Timer > 36) && (m_PlcToCpp.Timer < 61))
	//	//{
	//	//	wrist_target_angle = 2 * (61 - m_PlcToCpp.Timer);
	//	//	wrist_motion_flag = wrist_motion(wrist_target_angle);
	//	//}
	//	//else
	//	//{
	//	//	wrist_motion_flag = wrist_motion(0);
	//	//}
	//	m_CppToPlc.wrist_tarAngle = wrist_target_angle;
	//	m_CppToPlc.wrist_angle = wrist_angle_out(m_Inputs.wrist_resistor);

	//	//if (wrist_motion_flag == 1)
	//	//{
	//	//	hand_motion(time_one, time_two, time_three, time_four);
	//	//}
	//}

	//if (m_PlcToCpp.PlcStarted == true)
	//{
	//	//if (init_flag == 1)
	//	//{
	//	//	wrist_init_angle = k*m_Inputs.wrist_resistor + b;
	//	//	init_flag = 0;
	//	//}
	//	//wrist_motion_flag = wrist_motion(50);
	//	//if (wrist_motion_flag == 1)
	//	//{
	//		++hand_grip_time;
	//		if (hand_grip_time <= 3500)
	//		{
	//			hand_motion(time_one, time_two, time_three, time_four);
	//		}
	//		else
	//		{
	//			m_Outputs.hand_one = 0;//手部关闭
	//			m_Outputs.hand_two = 0;
	//			m_Outputs.hand_three = 0;
	//			m_Outputs.hand_four = 0;
	//			m_Outputs.hand_fan = 0;
	//			i = 0;//腕关节角度检测延迟归位
	//		}
	//	//}
	//}

	return hr;
}
///</AutoGeneratedContent>

double CRobotArmMain::wrist_angle_out(double resistor)
{
	return (k*resistor + b - wrist_init_angle);
}

int CRobotArmMain::wrist_motion(double target)//返回腕关节运动完成标志位
{
	int flag;
	wrist_fact_angle = wrist_angle_out(m_Inputs.wrist_resistor); m_Inputs.wrist_angle = m_CppToPlc.wrist_angle = wrist_fact_angle;//传递实际角度
	wrist_pwm_out = wrist_pid_control.pid_control(target, wrist_fact_angle); /*m_CppToPlc.wrist_error = target - wrist_fact_angle;//传递误差*/
	if (wrist_fact_angle <= wrist_angle_max)//腕关节角度限位
	{
		if (wrist_pwm_out >= wrist_pwm_min && wrist_pwm_out <= wrist_pwm_max)//腕关节pwm限位
		{
			m_Outputs.wrist_one = m_Outputs.wrist_two = static_cast<int>(wrist_pwm_out)+30;
			m_Outputs.wrist_three = m_Outputs.wrist_four = static_cast<int>(wrist_pwm_out);
			m_Outputs.wrist_five = m_Outputs.wrist_six = static_cast<int>(wrist_pwm_out)+50;
			m_Outputs.wrist_seven = m_Outputs.wrist_eight = static_cast<int>(wrist_pwm_out);
		}
		else if (wrist_pwm_out > wrist_pwm_max)//腕关节pwm限位
		{
			m_Outputs.wrist_one = m_Outputs.wrist_two = static_cast<int>(wrist_pwm_max)+30;
			m_Outputs.wrist_three = m_Outputs.wrist_four = static_cast<int>(wrist_pwm_max);
			m_Outputs.wrist_five = m_Outputs.wrist_six = static_cast<int>(wrist_pwm_max)+50;
			m_Outputs.wrist_seven = m_Outputs.wrist_eight = static_cast<int>(wrist_pwm_max);
		}
		else if (wrist_pwm_out < wrist_pwm_min)//腕关节pwm限位
		{
			m_Outputs.wrist_one = m_Outputs.wrist_two = static_cast<int>(wrist_pwm_min);
			m_Outputs.wrist_three = m_Outputs.wrist_four = static_cast<int>(wrist_pwm_min);
			m_Outputs.wrist_five = m_Outputs.wrist_six = static_cast<int>(wrist_pwm_min);
			m_Outputs.wrist_seven = m_Outputs.wrist_eight = static_cast<int>(wrist_pwm_min);
		}
	}
	else//腕关节角度限位
	{
		m_Outputs.wrist_one = m_Outputs.wrist_two = static_cast<int>(wrist_pwm_min);
		m_Outputs.wrist_three = m_Outputs.wrist_four = static_cast<int>(wrist_pwm_min);
		m_Outputs.wrist_five = m_Outputs.wrist_six = static_cast<int>(wrist_pwm_min);
		m_Outputs.wrist_seven = m_Outputs.wrist_eight = static_cast<int>(wrist_pwm_min);
	}
	m_CppToPlc.wrist_pwm = m_Outputs.wrist_four;//传递pwm输出
	wrist_error = fabs_(wrist_fact_angle - target);
	if (wrist_error <= 1 || wrist_fact_angle >= target)//延时检测
	{
		++i;
		if (wrist_error <= 1 && i >= 500)//到达预期角度判定
			flag = 1;
		else
			flag = 0;
	}
	else
	{
		flag = 0;
	}
	return (flag);
}

double CRobotArmMain::hand_temp_out(double num)
{
	return(temp_k*num + temp_b);
}
void CRobotArmMain::hand_motion(int time_one, int time_two, int time_three, int time_four)
{
	m_CppToPlc.hand_one_temp = m_Inputs.hand_one_temp; m_CppToPlc.hand_two_temp = m_Inputs.hand_two_temp;//手部温度变量传递
	m_CppToPlc.hand_three_temp = m_Inputs.hand_three_temp; m_CppToPlc.hand_four_temp = m_Inputs.hand_four_temp;//手部温度变量传递
	m_CppToPlc.hand_one_pwm = m_Outputs.hand_one; m_CppToPlc.hand_two_pwm = m_Outputs.hand_two;//手部pwm变量传递
	m_CppToPlc.hand_three_pwm = m_Outputs.hand_three; m_CppToPlc.hand_four_pwm = m_Outputs.hand_four;//手部pwm变量传递
	/////////////////////////////////////////////hand_one////////////////////////////////////////////////
	if (hand_temp_out(m_Inputs.hand_one_temp) > 30)
	{
		switch (time_one)
		{
		case 0: m_Outputs.hand_one = 550; break;
		case 400: m_Outputs.hand_one = 400; break;
		case 550: time_one = -1; break;
		default:break;
		}
		time_one = time_one + 1;
		m_Outputs.hand_fan = 16000;
	}
	else
	{
		m_Outputs.hand_one = 580;
		m_Outputs.hand_fan = 0;
	}
	/////////////////////////////////////////////hand_one/////////////////////////////////////////////////////////////

	////////////////////////////////////////////hand_two///////////////////////////////////////////////	
	if (hand_temp_out(m_Inputs.hand_two_temp) > 32)
	{
		switch (time_two)
		{
		case 0: m_Outputs.hand_two = 580; break;
		case 400: m_Outputs.hand_two = 400; break;
		case 450: time_two = -1; break;
		default:break;
		}
		time_two = time_two + 1;
		m_Outputs.hand_fan = 16000;
	}
	else
	{
		m_Outputs.hand_two = 600;
		m_Outputs.hand_fan = 0;
	}
	/////////////////////////////////////////////////////////hand_two///////////////////////

	///////////////////////////////////////////////////////hand_three//////////////////////////	
	if (hand_temp_out(m_Inputs.hand_three_temp) > 30)
	{
		switch (time_three)
		{
		case 0: m_Outputs.hand_three = 500; break;
		case 400: m_Outputs.hand_three = 400; break;
		case 450: time_three = -1; break;
		default:break;
		}
		time_three = time_three + 1;
		m_Outputs.hand_fan = 16000;
	}
	else
	{
		m_Outputs.hand_three = 580;
		m_Outputs.hand_fan = 0;
	}
	/////////////////////////////////////////////////hand_three////////////////////////////////

	//////////////////////////////////////////////hand_four///////////////////////////////////
	if (hand_temp_out(m_Inputs.hand_four_temp) > 33)
	{
		switch (time_four)
		{
		case 0: m_Outputs.hand_four = 600; break;
		case 400: m_Outputs.hand_four = 0; break;
		case 450: time_four = -1; break;
		default:break;
		}
		time_four = time_four + 1;
		m_Outputs.hand_fan = 16000;
	}
	else
	{
		m_Outputs.hand_four = 650;
		m_Outputs.hand_fan = 0;
	}
	///////////////////////////////////////hand_four///////////////////////////////////////////
}

void CRobotArmMain::UpdateInputs()
{
	timer = m_PlcToCpp.Timer;
	ElbowUpdateInputs();

	ShoulderElbowUpdateInputs();
}

void CRobotArmMain::UpdateOutputs()
{
	ElbowUpdateOutputs();

	ShoulderUpdateOutputs();
}

void CRobotArmMain::ShoulderElbowUpdateInputs()
{
	AngleRotate = -m_PlcToCpp.PosRotate / 23.0 * 90.0;
	AngleLevelShift = m_PlcToCpp.PosLevelShift / 23.0 * 90.0 + 0.5 * (AngleRotate);
	ShoulderInitFinish = m_PlcToCpp.ShoudlerInitFinish;
}

void CRobotArmMain::ShoulderUpdateOutputs()
{
	m_CppToPlc.TarPosLevelShift = TarPosLevelShift;
	m_CppToPlc.TarPosRotate = TarPosRotate;
}

void CRobotArmMain::ShoulderSetTarAngle(double LevelShiftAngle, double RotateAngle)
{
	//旋转和平移，只旋转动的话，耦合比：旋转：平移=2：1，若还要增加平移，则在比值右边增加。
	TarPosRotate = -RotateAngle / 90.0 * 23.0;
	TarPosLevelShift = TarPosRotate / 2 + LevelShiftAngle / 90 * 23.0;
}

void CRobotArmMain::ElbowUpdateInputs()
{
	//if (m_PlcToCpp.ElbowAngle < 200)//旧的肘会出现过零点状况
	//{
	//	elbow.GetActualAngle(m_PlcToCpp.ElbowAngle + 360 - 261);
	//}
	//else if (m_PlcToCpp.ElbowAngle >= 200)
	//{
	//elbow.GetActualAngle(m_PlcToCpp.ElbowAngle - 261);//不受力状态时，角度为261，减去，角度会增大//旧的肘
	//}

	elbow.GetActualAngle(351 - m_PlcToCpp.ElbowAngle);//不受力状态时，角度为350，减去，角度会减少//新的肘

}

void CRobotArmMain::ElbowUpdateOutputs()
{
	/* 输出给EL4004，用来控制比例压力阀。压力阀接收电压为0-10V */
	//电压转换为（0-10V）->（0-32767）
	if ((elbow.ShowM1() <= 3.5) && (elbow.ShowM2() <= 3.5))
	{
		m_Outputs.ElbowOutM1 = static_cast<int>(elbow.ShowM1() / 10.0 * 32767.0);
		m_Outputs.ElbowOutM2 = static_cast<int>(elbow.ShowM2() / 10.0 * 32767.0);
	}
	else if (elbow.ShowM1() > 3.5)
	{
		m_Outputs.ElbowOutM1 = static_cast<int>(3.0 / 10.0 * 32767.0);
	}
	else if (elbow.ShowM2() > 3.5)
	{
		m_Outputs.ElbowOutM2 = static_cast<int>(3.0 / 10.0 * 32767.0);
	}
	else
	{
		m_Outputs.ElbowOutM1 = 0;
		m_Outputs.ElbowOutM2 = 0;
	}

	///* 输出个PLC用来观察的 */
	//if (elbow.ShowAngle() > 0)
	{
		m_CppToPlc.ElbowTarAngle = elbow.ShowTarAngle();
		m_CppToPlc.ElbowAngle = elbow.ShowAngle();
	}
	//m_Outputs.m1v = elbow.ShowM1();
	//m_Outputs.m2v = elbow.ShowM2();
}

///////////////////////////////////////////////////////////////////////////////
HRESULT CRobotArmMain::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CRobotArmMain::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;

	m_Trace.Log(tlVerbose, FLEAVEA);
}


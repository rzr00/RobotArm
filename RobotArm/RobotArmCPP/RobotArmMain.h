///////////////////////////////////////////////////////////////////////////////
// RobotArmMain.h
#pragma once

#include "RobotArmCPPInterfaces.h"
#include "PID_Position.h"
#include "Elbow.h"
#include "3rdinterpolate.h"
#include "kinematics.h"

class CRobotArmMain 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
///</AutoGeneratedContent>
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_RobotArmCPPCRobotArmMain)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CRobotArmMain();
	virtual	~CRobotArmMain();

	void UpdateInputs();		//更新c++输入
	void UpdateOutputs();		//更新c++输出

	void ShoulderUpdateOutputs();
	void ShoulderElbowUpdateInputs();
	void ShoulderSetTarAngle(double LevelShiftAngle, double RotateAngle);

	void ElbowUpdateInputs();	//更新肘关节c++输入
	void ElbowUpdateOutputs();	//更新肘关节c++输出

///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

///</AutoGeneratedContent>

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	RobotArmMainParameter m_Parameter;
	RobotArmMainInputs m_Inputs;
	RobotArmMainOutputs m_Outputs;
	RobotArmMainPlcToCpp m_PlcToCpp;
	RobotArmMainCppToPlc m_CppToPlc;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
///</AutoGeneratedContent>

	// TODO: Custom variable
	const double pi;
	double timer;								//plc时间
	double AngleLevelShift;
	double AngleRotate;
	double TarPosLevelShift;					//肩关节平移目标位置值
	double TarPosRotate;						//肩关节旋转目标位置值
	bool ShoulderInitFinish;

	Elbow elbow;
	Polynomial ShoulderLevelShiftPolynomial;	//肩关节平移角度多项式
	Polynomial ElbowPolynomial;					//肘关节角度多项式
	Polynomial WristPolynomial;					//腕关节角度多项式

	int ErrorCode;
};
